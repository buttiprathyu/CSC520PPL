Reading Comprehension (30 percent)

These problems will help guide you through the reading. We recommend 
that you complete them before starting the other problems below. 
There is a `cqs.ml.txt` in the starter github repository.

These questions are meant to guide you through the readings that will help you 
complete the assignment. Keep your answers brief and simple.

1. Read section 5.1 of [Harper](http://www.cs.cmu.edu/~rwh/isml/book.pdf) about 
   tuple types and tuple patterns. Also look at the list examples in Sections 
   9.1 and 9.2 of Harper.

   Now consider the pattern `(x::y::zs, w)`. For each of the following 
   expressions, tell whether the pattern matches the value denoted. If the 
   pattern matches, say what values are bound to the four variables `x`, `y`, 
   `zs`, and `w`. If it does not match, explain why not.

   * a. `([1, 2, 3], ("COMP", 105))`
   * b. `(("COMP", 105), [1, 2, 3])`
   * c. `([("COMP", 105)], (1, 2, 3))`
   * d. `(["COMP", "105"], true)`
   * e. `([true, false], 2.718281828)`

   Answers here:
   * a. Matches
          val x = 1 : int
          val y = 2 : int
          val zs = [3] : int list
          val w = ("cp", 105) : string * int

   * b. Does not match
        (x::y::zs) looks for a list of at least 2 elements and this expression's first part ("COMP", 105)
        is not a list.

   * c. Does not match
        (x::y::zs) looks for a list of at least 2 elements and this expression's first part
        [("COMP", 105)] does not satisfy this as it is not of the same type.

   * d. Matches
          val x = "comp" : string
          val y = "105" : string
          val zs = [] : string list
          val w = true : bool

   * e. Matches
          val x = true : bool
          val y = false : bool
          val zs = [] : bool list
          val w = 2.718281828 : real

   You are now starting to be ready to use pattern matching.

2. Look at the clausal function definition of outranks on page 83 of Harper. 
   Using the clausal definition enables us to avoid nested case expressions such 
   as we might find in Standard ML or μML, and it enables us to avoid nested if 
   expressions such as we might find in μScheme. This particular example also 
   collapses multiple cases by using the "wildcard pattern" `_`.

   A wildcard by itself can match anything, but a wildcard in a clausal 
   definition can match only things that are not matched by preceding clauses. 
   Answer these questions about the wildcards in `outranks`:

   * In the second clause, what three suits can the `_` match?

     →  Hearts, Diamonds, Clubs

   * In the fifth clause, what suits can the `_` match?

     →  Diamonds, Clubs

   * In the eighth and final clause, what suits can the `_` match?

     →  Hearts, Diamonds, Spades

     You are now ready to match patterns that combine tuples with algebraic 
     data types.


3. Read the descriptions of patterns and example values (steps 3 and 2) in 
   the fourth[Lesson in Program Design](https://www.cs.tufts.edu/comp/105-2019s/design/lessons.pdf). Look at 
   Table 4.1, including the *Types of parts* column. Using the ideas you find 
   there, prepare to answer questions about this expression:
    ```
    case f (x, y, z) 
      of []      => raise Empty
       | w :: ws => if p w then SOME w else NONE
    ```
   You are told that the subexpression `f (x, y, z)` has type `'a list`. Using 
   that information, give the type of each of these code fragments, which are 
   built from parts of patterns:

   * a. The type of the pattern `w :: ws`

     →  'a list , 'w : 'a , ws : 'a list

   * b. The type of the variable `ws`

     →  'a list

   * The type of the expression `SOME w`

     → 'a

   You are ready to use pattern matching on common ML types.

4. Read the section on unit testing in the [guide to learning ML](https://www.cs.tufts.edu/comp/105-2019s/readings/ml.pdf).
   Read about infix function names in step 3 of the "design steps" section of 
   the handout [Program Design with ML Types and Pattern Matching](https://www.cs.tufts.edu/comp/105-2019s/handouts/mlproofs.pdf). 
   And read the section on [unit testing](#unit) in this homework.

   Now, using the interpreter to be sure your answer is well typed, translate 
   the following *failing* unit test into ML:
```
(check-expect (foldl + 0 '(1 2 3)) 7)
```
   Your translation:

   →  val () =
          Unit.checkExpectWith Int.toString "sum of numbers"
          (fn () => (foldl (op +) 0 [1,2,3]))
          7

   You are ready to write unit tests.

5. In Chapter 5.3 of *Programming Languages: Build, Prove, and Compare* by 
   Ramsey, the eval code for applying a function appears in code chunk 350a. In 
   evaluating `APPLY (f, args)`, if expression `f` does not evaluate to either a 
   primitive function or a closure, the code raises the RuntimeError exception.

   Show a piece of μScheme code that would, when evaluated, would cause 
   chunk 350d to raise the `RuntimeError` exception. **We are asking for 
   μScheme code that the interpreter runs, not for ML code.**

    → (+ 1 2) this expression works fine as it is going to apply APPLYADD primitive function
     on 1,2 and the result is 3.
    (1 2 3) this expression will result in run-time error as 1 is not a primitive function
    or closure hence results in RuntimeError exception.


6. "Free" variables are those that are not bound to a value in the current 
   scope. You can find a longer discussion and precise definition in section 
   5.5 of Build, Prove, and Compare. Read the section and identify the free 
   variables of the expressions below. Remember that a name occurring in 
   function position can be a free variable.

   * a. Free variables of `(lambda (x) (lambda (y) (equal? x y)))`

     → equal?

   * b. Free variables of `(lambda (y) (equal? x y))`

     → equal?, x

   * c. Free variables of
```
(lambda (s1 s2)
  (if (or (atom? s1) (atom? s2))
    (= s1 s2)
    (and (equal? (car s1) (car s2))
         (equal? (cdr s1) (cdr s2)))))
```
     → or, =,  atom?, and, equal?, car, cdr
