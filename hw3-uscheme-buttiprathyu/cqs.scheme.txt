1. Review Section 2.2 on list primitives and S-expression literals
    and say what is the value of each of the expressions below.
    If a run-time error would occur, please say so.

    ````
    (car '(a b 1 2))  
    (cdr '(a b 1 2))  
    (= 'a 'b)         
    ````

    Ans 1. a
    Ans 2. (b 1 2)
    Ans 3. #f

 2. Review the first few pages of Section 2.3, through the end of
    Section 2.3.2.  Which of the following expressions evaluate to
    `#t` for every *list* `xs`?

    ````
    (=      (reverse (reverse xs)) xs) - #f
    (equal? (reverse (reverse xs)) xs) - #t
    ````
    
    Ans: (b) Only the second
    
 3. Difference between Simple-reverse and reverse 
    Ans :  Simple-reverse takes the first element off the list, reverse the rest of the list and append the first element to the end of the list. We then recurse so that each time we reverse the rest of the list, we are doing the same thing on shorter list. This append is proportional to the length of the list and takes O(n). This recursion is expensive too. So simple-reverse takes O(n^2) time and space where n is the length of the list. Reverse - does this in O(n) time by taking two lists and return the reverse of xs followed by unreversed ys. It uses method of accumulating parameters, because the parameter ys is used to accumulate the eventual result in revapp. Efficient reverse is by reversing and appending to the empty list.


4. (length (append xs ys)) = (+ (length xs) (length ys))


5. Imagine you are tasked with translating the following C function into 
   μScheme:
```
    bool parity(int m) {
        int half_m = m / 2;
        int other_half = m - half_m;
        return half_m == other_half;
    }      
```
   Review Section 2.5, and answer each of these questions with “yes” or “no.”

   a. Is it sensible to bind `half_m` and `other_half` in the same `let` 
   expression?
   Ans : no

   b. Is it sensible to bind `half_m` and `other_half` in the same `let*` 
   expression?
   Ans: yes
   
   c. Is the below translation sensible and faithful to the original C code?
```
   (define parity (m)
   (letrec ([half_m     (/ m 2)]
            [other_half (- m half_m)])
     (= half_m other_half)))

```
   Ans : no
